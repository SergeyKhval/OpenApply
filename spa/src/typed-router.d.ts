/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

declare module 'vue-router/auto-routes' {
  import type {
    RouteRecordInfo,
    ParamValue,
    ParamValueOneOrMore,
    ParamValueZeroOrMore,
    ParamValueZeroOrOne,
  } from 'vue-router'

  /**
   * Route name map generated by unplugin-vue-router
   */
  export interface RouteNamedMap {
    '/': RouteRecordInfo<'/', '/', Record<never, never>, Record<never, never>>,
    '/admin': RouteRecordInfo<'/admin', '/admin', Record<never, never>, Record<never, never>>,
    '/dashboard': RouteRecordInfo<'/dashboard', '/dashboard', Record<never, never>, Record<never, never>, '/dashboard/applications/' | '/dashboard/applications/[applicationId]' | '/dashboard/archive' | '/dashboard/cover-letters' | '/dashboard/file-import' | '/dashboard/resumes'>,
    '/dashboard/applications/': RouteRecordInfo<'/dashboard/applications/', '/dashboard/applications', Record<never, never>, Record<never, never>>,
    '/dashboard/applications/[applicationId]': RouteRecordInfo<'/dashboard/applications/[applicationId]', '/dashboard/applications/:applicationId', { applicationId: ParamValue<true> }, { applicationId: ParamValue<false> }>,
    '/dashboard/archive': RouteRecordInfo<'/dashboard/archive', '/dashboard/archive', Record<never, never>, Record<never, never>>,
    '/dashboard/cover-letters': RouteRecordInfo<'/dashboard/cover-letters', '/dashboard/cover-letters', Record<never, never>, Record<never, never>>,
    '/dashboard/file-import': RouteRecordInfo<'/dashboard/file-import', '/dashboard/file-import', Record<never, never>, Record<never, never>>,
    '/dashboard/resumes': RouteRecordInfo<'/dashboard/resumes', '/dashboard/resumes', Record<never, never>, Record<never, never>>,
  }

  /**
   * Route file to route info map by unplugin-vue-router.
   * Used by the volar plugin to automatically type useRoute()
   *
   * Each key is a file path relative to the project root with 2 properties:
   * - routes: union of route names of the possible routes when in this page (passed to useRoute<...>())
   * - views: names of nested views (can be passed to <RouterView name="...">)
   *
   * @internal
   */
  export interface _RouteFileInfoMap {
    'src/pages/index.vue': {
      routes: '/'
      views: never
    }
    'src/pages/admin.vue': {
      routes: '/admin'
      views: never
    }
    'src/pages/dashboard.vue': {
      routes: '/dashboard' | '/dashboard/applications/' | '/dashboard/applications/[applicationId]' | '/dashboard/applications' | '/dashboard/archive' | '/dashboard/cover-letters' | '/dashboard/file-import' | '/dashboard/resumes'
      views: 'default'
    }
    'src/pages/dashboard/applications/index.vue': {
      routes: '/dashboard/applications/'
      views: never
    }
    'src/pages/dashboard/applications/[applicationId].vue': {
      routes: '/dashboard/applications/[applicationId]'
      views: never
    }
    'src/pages/dashboard/archive.vue': {
      routes: '/dashboard/archive'
      views: never
    }
    'src/pages/dashboard/cover-letters.vue': {
      routes: '/dashboard/cover-letters'
      views: never
    }
    'src/pages/dashboard/file-import.vue': {
      routes: '/dashboard/file-import'
      views: never
    }
    'src/pages/dashboard/resumes.vue': {
      routes: '/dashboard/resumes'
      views: never
    }
  }

  /**
   * Get a union of possible route names in a certain route component file.
   * Used by the volar plugin to automatically type useRoute()
   *
   * @internal
   */
  export type _RouteNamesForFilePath<FilePath extends string> =
    _RouteFileInfoMap extends Record<FilePath, infer Info>
      ? Info['routes']
      : keyof RouteNamedMap
}
